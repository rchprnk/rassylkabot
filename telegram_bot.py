import asyncio
from pyrogram import Client, filters
from pyrogram.errors import ChatWriteForbidden, PeerIdInvalid, FloodWait

# –î–∞–Ω—ñ –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
API_ID_YOURS = 24588949  # –í–∞—à API_ID
API_HASH_YOURS = "590483254d766bec4b18abdc7354d503"  # –í–∞—à API_HASH
SESSION_NAME_YOURS = "my_account_session"  # –°–µ—Å—ñ—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞

# ID –≥—Ä—É–ø –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
GROUP_IDS_YOURS = [
    -1001950993408,
    -1002061972274,
    -1001822629837,
    -1001156898558,
    -1002432287541,
    -1001878801745,
    -1001833194440,
    -1001603442308,
    -1001571671475,
    -1001612144132,
    -1001928009530,
    -1001910048499,
    -1001678758320,
    -1002134057899,
    -1001871218088,
    -1001501665029,
    -1001634840836,
    -1001591908042
]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—ñ –≥—Ä—É–ø–∏

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
MESSAGE = """
üí• Aegis VoIP ‚Äì —Å–≤—è–∑—å, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å!
üìä –°—Ä–µ–¥–Ω–∏–π –¥–æ–∑–≤–æ–Ω 55% ‚Äì –≤–∞—à –±–∏–∑–Ω–µ—Å –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.
üîë –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º?
 ‚Ä¢ –ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –†–§: MTS, MegaFon, Beeline, Yota, Tele2.
 ‚Ä¢ –ü—Ä–µ–º–∏—É–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.
üéÅ $5 –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!
‚öôÔ∏è –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
 ‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
 ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7.
üöÄ Aegis VoIP ‚Äì –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å.
"""

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç Pyrogram
app_yours = Client(SESSION_NAME_YOURS, api_id=API_ID_YOURS, api_hash=API_HASH_YOURS)


async def send_broadcast(client, group_ids):
    """–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≥—Ä—É–ø–∏ —Ç–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —á–∞—Ç—ñ–≤."""
    sent_count = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    for group_id in group_ids:
        try:
            await client.send_message(chat_id=group_id, text=MESSAGE)
            sent_count += 1
            print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏ {group_id}")
        except ChatWriteForbidden:
            print(f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –≤ –≥—Ä—É–ø—É {group_id}.")
        except PeerIdInvalid:
            print(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Peer ID –¥–ª—è –≥—Ä—É–ø–∏ {group_id}.")
        except FloodWait as e:
            print(f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç: –æ—á—ñ–∫—É—î–º–æ {e.value} —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(e.value)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑ –≥—Ä—É–ø–æ—é {group_id}: {e}")
    return sent_count


async def periodic_broadcast(client, group_ids, interval):
    """–†–æ–∑—Å–∏–ª–∫–∞ –∫–æ–∂–Ω—ñ interval —Å–µ–∫—É–Ω–¥."""
    while True:
        print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞...")
        sent_count = await send_broadcast(client, group_ids)
        print(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É {sent_count} —á–∞—Ç—ñ–≤.")
        await asyncio.sleep(interval)


@app_yours.on_message(filters.text & filters.private)
async def handle_message(client, message):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Ä—É—á–Ω—É."""
    if message.text.lower() == "—Ä–∞—Å—Å—ã–ª–∫–∞":
        print("–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É '–†–∞—Å—Å—ã–ª–∫–∞'. –í–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É.")
        sent_count = await send_broadcast(client, GROUP_IDS_YOURS)
        await message.reply(f"–î–µ–ª–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ {sent_count} —á–∞—Ç–æ–≤.")  # –í—ñ–¥–ø–æ–≤—ñ–¥—å —É –≤–∏–±—Ä–∞–Ω–æ–º—É
        print(f"–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É {sent_count} —á–∞—Ç—ñ–≤.")


async def run_client():
    """–ó–∞–ø—É—Å–∫ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —Ä–æ–∑—Å–∏–ª–æ–∫."""
    await app_yours.start()

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω (600 —Å–µ–∫—É–Ω–¥)
    task = asyncio.create_task(periodic_broadcast(app_yours, GROUP_IDS_YOURS, 600))

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
    await asyncio.gather(task)


if __name__ == "__main__":
    asyncio.run(run_client())